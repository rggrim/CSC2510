When you commit, the updates exist on the local devoie in your .git file
commit - save to your local repository, in your .git file
push - save to shared repository (server)
pull/fetch - check for updates
squash - shove all the commits together, and you can no longer access the commit history or revert commits
remote repository - any repository that is not your local repo, including repos on other collaborator's devices and the shared gitHub repo

four ways to resolve conflicts when pushing to origin
 - accept your own (resolve with mine)
 - resolve with theirs
 - resolve with both                    # how does this work???
 - resolve with none (get rid of both)

When working with different branches, you can create a merge commit
back into the main branch. This saves the merge to your local repo.


BASH COMMANDS
pwd                 - Print Working Directory, shows you where you currently are
ls                  -  shows every file in the directory except for hidden files
ls -a               - shows every file, INCLUDING hidden files
ls -ltr             - shows your permissions, w for write, d is for denied, x for execute, r is for read
                      also shows the name of the owner, file size, modification date and time, and file name
ls -ltr | tail -n 3 - shows permissions for the tailing 3 files in the creation order
p *                 - returns everything that starts with a p?
clear               - clears your screen
cd                  - change directory
cd ..               - moves you up into the parent folder of wherever you currently are in the directory
nano                - opens text editor
nano fileName.fileType - opens text editor with filename
cat myFile.txt      - prints whats in the text file
head / tail myFile.txt - prints the first few or last lines of the text file
rm myFile.txt       - deletes the file
rm -r dirName       - deletes directory/folder
mkdir               - makes a directory
touch               - to create a new file
&&                  - allows us to execute multiple actions in one line
whoami              - returns current working User


git init -b main    - creates a .git/ folder in your directory and names it main
git status          - fetches to check if you're up to date
git branch -m newName - renames currently checked out branch to newName
git add config.json - stage config.json
git add *           - stages all files with uncommitted changes 
git add *.txt       - stages all .txt files with uncommited changes
git commit -m ""    - commits all staged files with a message of your choice between the parentheses
git log             - view all commits and displays hashes for the commits!
git clone sshLink   - will clone the repo at the end of the link, putting it into a folder with the name        
                      of the cloned repo
tail --help         - prints out details about command options for "tail"
git checkout
git push
git branch 
git merge branchName
git pull


JSON FILE STRUCTURE:
#json files are made up of key value pairs!

[
        {"firstname":"Riley","lastname":"Grimaud"},
        {"firstname":"Daniel","lastname":"Selvidge"}
]

